{"ast":null,"code":"import _asyncToGenerator from\"/Users/shikharmishra/Documents/Mishra-Messenger/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/shikharmishra/Documents/Mishra-Messenger/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/shikharmishra/Documents/Mishra-Messenger/frontend/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect,useState,useContext}from'react';import{AddIcon}from\"@chakra-ui/icons\";import{Box,Stack,Text}from\"@chakra-ui/layout\";import{useToast}from\"@chakra-ui/toast\";import axios from\"axios\";import ChatContext from\"../Context/chat-context\";import{getSender}from\"../config/ChatLogics\";import ChatLoading from\"./ChatLoading\";import GroupChatModal from\"./miscellaneous/GroupChatModal\";import{Button}from\"@chakra-ui/react\";//import { useHelper } from '../config/helper-hook';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MyChats=function MyChats(_ref){var fetchAgain=_ref.fetchAgain;var _useState=useState(),_useState2=_slicedToArray(_useState,2),loggedUser=_useState2[0],setLoggedUser=_useState2[1];var _useContext=useContext(ChatContext),selectedChat=_useContext.selectedChat,setSelectedChat=_useContext.setSelectedChat,user=_useContext.user,chats=_useContext.chats,setChats=_useContext.setChats;//const {getSender}=useHelper();\nvar toast=useToast();var fetchChats=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var config,_yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;config={headers:{Authorization:\"Bearer \".concat(user.token)}};_context.next=4;return axios.get(\"/api/chat\",config);case 4:_yield$axios$get=_context.sent;data=_yield$axios$get.data;setChats(data);console.log(data,'fetching all users chats in my chats');_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);toast({title:\"Error Occured!\",description:\"Failed to Load the chats\",status:\"error\",duration:3000,isClosable:true,position:\"bottom-left\"});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchChats(){return _ref2.apply(this,arguments);};}();useEffect(function(){setLoggedUser(JSON.parse(localStorage.getItem(\"userInformation\")));//chatLogics \nfetchChats();// eslint-disable-next-line\n},[fetchAgain]);//fetching chats again witht the updated list of all of our chats...\n//--when we leave a group our updated list of chats needs to be fetched again\nreturn/*#__PURE__*/_jsxs(Box,{d:{base:selectedChat?\"none\":\"flex\",md:\"flex\"},flexDir:\"column\",alignItems:\"center\",p:3,bg:\"white\",w:{base:\"100%\",md:\"31%\"},borderRadius:\"lg\",borderWidth:\"1px\",children:[/*#__PURE__*/_jsxs(Box,{pb:3,px:3,fontSize:{base:\"28px\",md:\"30px\"},fontFamily:\"Work sans\",d:\"flex\",w:\"100%\",justifyContent:\"space-between\",alignItems:\"center\",children:[\"My Chats\",/*#__PURE__*/_jsx(GroupChatModal,{children:/*#__PURE__*/_jsx(Button,{d:\"flex\",fontSize:{base:\"17px\",md:\"10px\",lg:\"17px\"},rightIcon:/*#__PURE__*/_jsx(AddIcon,{}),children:\"New Group Chat\"})})]}),/*#__PURE__*/_jsx(Box,{d:\"flex\",flexDir:\"column\",p:3,bg:\"#F8F8F8\",w:\"100%\",h:\"100%\",borderRadius:\"lg\",overflowY:\"hidden\",children:chats?/*#__PURE__*/_jsx(Stack,{overflowY:\"scroll\",children:chats.map(function(chat,i){return/*#__PURE__*/_jsx(Box,{onClick:function onClick(){return setSelectedChat(chat);},cursor:\"pointer\",bg:selectedChat===chat?\"#38B2AC\":\"#E8E8E8\",color:selectedChat===chat?\"white\":\"black\",px:3,py:2,borderRadius:\"lg\",children:/*#__PURE__*/_jsx(Text,{children:!chat.isGroupChat?getSender(loggedUser,chat.users):chat.chatName})},chat._id);})}):/*#__PURE__*/_jsx(ChatLoading,{})})]});};export default MyChats;","map":{"version":3,"sources":["/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/MyChats.js"],"names":["React","useEffect","useState","useContext","AddIcon","Box","Stack","Text","useToast","axios","ChatContext","getSender","ChatLoading","GroupChatModal","Button","MyChats","fetchAgain","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","toast","fetchChats","config","headers","Authorization","token","get","data","console","log","message","title","description","status","duration","isClosable","position","JSON","parse","localStorage","getItem","base","md","lg","map","chat","i","isGroupChat","users","chatName","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport ChatContext from \"../Context/chat-context\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\n//import { useHelper } from '../config/helper-hook';\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = useContext(ChatContext);\n  //const {getSender}=useHelper();\n\n  const toast = useToast();\n  \n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n      console.log(data, 'fetching all users chats in my chats');\n\n    } catch (error) {\n\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInformation\"))); //chatLogics \n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n  //fetching chats again witht the updated list of all of our chats...\n  //--when we leave a group our updated list of chats needs to be fetched again\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat, i) => (\n              \n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName}\n                </Text>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n"]},"metadata":{},"sourceType":"module"}