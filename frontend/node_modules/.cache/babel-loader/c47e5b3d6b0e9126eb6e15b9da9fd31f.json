{"ast":null,"code":"var _jsxFileName = \"/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/miscellaneous/GroupChatModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, useDisclosure, FormControl, Input, useToast, Box } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport ChatContext from \"../../Context/chat-context\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GroupChatModal = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    user,\n    chats,\n    setChats\n  } = useContext(ChatContext);\n  const toast = useToast();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n\n  const selectedGroupHandler = userToAdd => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top\"\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async query => {\n    setSearch(query);\n\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data, 'users search response from server');\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      console.error(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n    }\n  };\n\n  const handleDelete = delUser => {\n    setSelectedUsers(selectedUsers.filter(selectedUser => selectedUser._id !== delUser._id));\n  };\n\n  const submitHandler = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top\"\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          /* \"Content-type\": \"application/json\", */\n          Authorization: `Bearer ${user.token}`\n        } //already body jsonType\n\n      };\n      const {\n        data\n      } = await axios.post(`/api/chat/group`, {\n        name: groupChatName,\n        users: JSON.stringify(selectedUsers.map(selectedUser => selectedUser._id)) //server side req.body accepts stringify array of user id\n\n      }, config);\n      setChats([data, ...chats]); //recently created chat first\n\n      console.log(data, 'group chat added/created respopnse');\n      onClose(); //modal close on success\n\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    } catch (error) {\n      console.error(error.message);\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: onOpen,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: onClose,\n      isOpen: isOpen,\n      isCentered: true,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          fontSize: \"35px\",\n          fontFamily: \"Work sans\",\n          d: \"flex\",\n          justifyContent: \"center\",\n          children: \"Create Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          d: \"flex\",\n          flexDir: \"column\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"Chat Name\",\n              mb: 3,\n              onChange: e => setGroupChatName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"Add Users eg: Kohli, Ganguli, Dhoni\",\n              mb: 1,\n              onChange: e => handleSearch(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            w: \"100%\",\n            d: \"flex\",\n            flexWrap: \"wrap\",\n            children: selectedUsers.map(selectedUser => /*#__PURE__*/_jsxDEV(UserBadgeItem, {\n              user: selectedUser,\n              handleFunction: () => handleDelete(selectedUser)\n            }, selectedUser._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), loading ?\n          /*#__PURE__*/\n          // <ChatLoading />\n          _jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this) : //top 4 results\n          searchResult === null || searchResult === void 0 ? void 0 : searchResult.slice(0, 4).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n            user: user,\n            handleFunction: () => selectedGroupHandler(user)\n          }, user._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: submitHandler,\n            colorScheme: \"blue\",\n            children: \"Create Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GroupChatModal, \"DljTHtnc+ze85CwsP/UuTba2HiE=\", false, function () {\n  return [useToast, useDisclosure];\n});\n\n_c = GroupChatModal;\nexport default GroupChatModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupChatModal\");","map":{"version":3,"sources":["/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/miscellaneous/GroupChatModal.js"],"names":["React","useState","useContext","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","useDisclosure","FormControl","Input","useToast","Box","axios","ChatContext","UserBadgeItem","UserListItem","GroupChatModal","children","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","loading","setLoading","user","chats","setChats","toast","isOpen","onOpen","onClose","selectedGroupHandler","userToAdd","includes","title","status","duration","isClosable","position","handleSearch","query","config","headers","Authorization","token","data","get","console","log","error","message","description","handleDelete","delUser","filter","selectedUser","_id","submitHandler","post","name","users","JSON","stringify","map","response","e","target","value","slice"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport ChatContext from \"../../Context/chat-context\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  \n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const { user, chats, setChats } = useContext(ChatContext);\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();  \n  \n\n  const selectedGroupHandler = (userToAdd) => {\n    \n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    \n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data, 'users search response from server');\n      \n      setLoading(false);\n      setSearchResult(data);\n\n    } catch (error) {\n\n      console.error(error.message);  \n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((selectedUser) => selectedUser._id !== delUser._id));\n  };\n\n  const submitHandler = async () => {\n\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {/* \"Content-type\": \"application/json\", */ Authorization: `Bearer ${user.token}`}//already body jsonType\n      };\n      \n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((selectedUser) => selectedUser._id)), \n          //server side req.body accepts stringify array of user id\n        },\n        config\n      );\n\n      setChats([data, ...chats]); //recently created chat first\n      console.log(data, 'group chat added/created respopnse');\n      onClose(); //modal close on success\n\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n\n    } catch (error) {\n      \n      console.error(error.message);  \n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: Kohli, Ganguli, Dhoni\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((selectedUser) => (\n                <UserBadgeItem\n                  key={selectedUser._id}\n                  user={selectedUser}\n                  handleFunction={() => handleDelete(selectedUser)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : ( //top 4 results\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => selectedGroupHandler(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={submitHandler} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default GroupChatModal;\n"]},"metadata":{},"sourceType":"module"}