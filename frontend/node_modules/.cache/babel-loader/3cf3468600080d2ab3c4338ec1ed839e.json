{"ast":null,"code":"var _jsxFileName = \"/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/MyChats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport ChatContext from \"../Context/chat-context\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\"; //import { useHelper } from '../config/helper-hook';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyChats = _ref => {\n  _s();\n\n  let {\n    fetchAgain\n  } = _ref;\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = useContext(ChatContext); //const {getSender}=useHelper();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n      console.log(data, 'fetching all users chats in my chats');\n    } catch (error) {\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInformation\"))); //chatLogics \n\n    fetchChats(); // eslint-disable-next-line\n  }, [fetchAgain]); //fetching chats again witht the updated list of all of our chats...\n  //--when we leave a group our updated list of chats needs to be fetched again\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    d: {\n      base: selectedChat ? \"none\" : \"flex\",\n      md: \"flex\"\n    },\n    flexDir: \"column\",\n    alignItems: \"center\",\n    p: 3,\n    bg: \"white\",\n    w: {\n      base: \"100%\",\n      md: \"31%\"\n    },\n    borderRadius: \"lg\",\n    borderWidth: \"1px\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      pb: 3,\n      px: 3,\n      fontSize: {\n        base: \"28px\",\n        md: \"30px\"\n      },\n      fontFamily: \"Work sans\",\n      d: \"flex\",\n      w: \"100%\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [\"My Chats\", /*#__PURE__*/_jsxDEV(GroupChatModal, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          d: \"flex\",\n          fontSize: {\n            base: \"17px\",\n            md: \"10px\",\n            lg: \"17px\"\n          },\n          rightIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 24\n          }, this),\n          children: \"New Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      flexDir: \"column\",\n      p: 3,\n      bg: \"#F8F8F8\",\n      w: \"100%\",\n      h: \"100%\",\n      borderRadius: \"lg\",\n      overflowY: \"hidden\",\n      children: chats ? /*#__PURE__*/_jsxDEV(Stack, {\n        overflowY: \"scroll\",\n        children: chats.map((chat, i) => /*#__PURE__*/_jsxDEV(Box, {\n          onClick: () => setSelectedChat(chat),\n          cursor: \"pointer\",\n          bg: selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\",\n          color: selectedChat === chat ? \"white\" : \"black\",\n          px: 3,\n          py: 2,\n          borderRadius: \"lg\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)\n        }, chat._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyChats, \"LgxQrqDVXmGQKa+qWrbzE4tMyao=\", false, function () {\n  return [useToast];\n});\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/MyChats.js"],"names":["React","useEffect","useState","useContext","AddIcon","Box","Stack","Text","useToast","axios","ChatContext","getSender","ChatLoading","GroupChatModal","Button","MyChats","fetchAgain","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","toast","fetchChats","config","headers","Authorization","token","data","get","console","log","error","message","title","description","status","duration","isClosable","position","JSON","parse","localStorage","getItem","base","md","lg","map","chat","i","isGroupChat","users","chatName","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport ChatContext from \"../Context/chat-context\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\n//import { useHelper } from '../config/helper-hook';\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = useContext(ChatContext);\n  //const {getSender}=useHelper();\n\n  const toast = useToast();\n  \n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n      console.log(data, 'fetching all users chats in my chats');\n\n    } catch (error) {\n\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInformation\"))); //chatLogics \n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n  //fetching chats again witht the updated list of all of our chats...\n  //--when we leave a group our updated list of chats needs to be fetched again\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat, i) => (\n              \n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName}\n                </Text>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n"]},"metadata":{},"sourceType":"module"}