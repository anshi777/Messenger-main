{"ast":null,"code":"export const getSender = (loggedUser, users) => {\n  //return console.log('id')\n  //1on1 chatName\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\nexport const getSenderFull = (loggedUser, users) => {\n  //eye icon ProfileModal\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n}; //separating user's and sender's text in chatbox\n\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n  if (i < messages.length - 1 && messages[i + 1].sender._id === m.sender._id && messages[i].sender._id !== userId) return 33;else if (i < messages.length - 1 && messages[i + 1].sender._id !== m.sender._id && messages[i].sender._id !== userId || i === messages.length - 1 && messages[i].sender._id !== userId) return 0;else return \"auto\";\n}; //padding between same user's/sender's texts\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n}; //displaying avatar on sender's last message\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return i < messages.length - 1 && (messages[i + 1].sender._id !== m.sender._id || messages[i + 1].sender._id === undefined) && messages[i].sender._id !== userId;\n};\nexport const isLastMessage = (messages, i, userId) => {\n  return i === messages.length - 1 && messages[messages.length - 1].sender._id !== userId && messages[messages.length - 1].sender._id;\n};","map":{"version":3,"sources":["/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/config/ChatLogics.js"],"names":["getSender","loggedUser","users","_id","name","getSenderFull","isSameSenderMargin","messages","m","i","userId","length","sender","isSameUser","isSameSender","undefined","isLastMessage"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,UAAD,EAAaC,KAAb,KAAuB;AAC9C;AACA;AACA,SAAOA,KAAK,CAAC,CAAD,CAAL,CAASC,GAAT,KAAiBF,UAAU,CAACE,GAA5B,GAAkCD,KAAK,CAAC,CAAD,CAAL,CAASE,IAA3C,GAAkDF,KAAK,CAAC,CAAD,CAAL,CAASE,IAAlE;AACD,CAJM;AAOP,OAAO,MAAMC,aAAa,GAAG,CAACJ,UAAD,EAAaC,KAAb,KAAuB;AAClD;AACA,SAAOA,KAAK,CAAC,CAAD,CAAL,CAASC,GAAT,KAAiBF,UAAU,CAACE,GAA5B,GAAkCD,KAAK,CAAC,CAAD,CAAvC,GAA6CA,KAAK,CAAC,CAAD,CAAzD;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMI,kBAAkB,GAAG,CAACC,QAAD,EAAWC,CAAX,EAAcC,CAAd,EAAiBC,MAAjB,KAA4B;AAC5D;AAEA,MACED,CAAC,GAAGF,QAAQ,CAACI,MAAT,GAAkB,CAAtB,IACAJ,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAR,CAAgBG,MAAhB,CAAuBT,GAAvB,KAA+BK,CAAC,CAACI,MAAF,CAAST,GADxC,IAEAI,QAAQ,CAACE,CAAD,CAAR,CAAYG,MAAZ,CAAmBT,GAAnB,KAA2BO,MAH7B,EAKE,OAAO,EAAP,CALF,KAMK,IACFD,CAAC,GAAGF,QAAQ,CAACI,MAAT,GAAkB,CAAtB,IACCJ,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAR,CAAgBG,MAAhB,CAAuBT,GAAvB,KAA+BK,CAAC,CAACI,MAAF,CAAST,GADzC,IAECI,QAAQ,CAACE,CAAD,CAAR,CAAYG,MAAZ,CAAmBT,GAAnB,KAA2BO,MAF7B,IAGCD,CAAC,KAAKF,QAAQ,CAACI,MAAT,GAAkB,CAAxB,IAA6BJ,QAAQ,CAACE,CAAD,CAAR,CAAYG,MAAZ,CAAmBT,GAAnB,KAA2BO,MAJtD,EAMH,OAAO,CAAP,CANG,KAOA,OAAO,MAAP;AACN,CAjBM,C,CAmBP;;AACA,OAAO,MAAMG,UAAU,GAAG,CAACN,QAAD,EAAWC,CAAX,EAAcC,CAAd,KAAoB;AAC5C,SAAOA,CAAC,GAAG,CAAJ,IAASF,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAR,CAAgBG,MAAhB,CAAuBT,GAAvB,KAA+BK,CAAC,CAACI,MAAF,CAAST,GAAxD;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMW,YAAY,GAAG,CAACP,QAAD,EAAWC,CAAX,EAAcC,CAAd,EAAiBC,MAAjB,KAA4B;AACtD,SACED,CAAC,GAAGF,QAAQ,CAACI,MAAT,GAAkB,CAAtB,KACCJ,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAR,CAAgBG,MAAhB,CAAuBT,GAAvB,KAA+BK,CAAC,CAACI,MAAF,CAAST,GAAxC,IACCI,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAR,CAAgBG,MAAhB,CAAuBT,GAAvB,KAA+BY,SAFjC,KAGAR,QAAQ,CAACE,CAAD,CAAR,CAAYG,MAAZ,CAAmBT,GAAnB,KAA2BO,MAJ7B;AAMD,CAPM;AAQP,OAAO,MAAMM,aAAa,GAAG,CAACT,QAAD,EAAWE,CAAX,EAAcC,MAAd,KAAyB;AACpD,SACED,CAAC,KAAKF,QAAQ,CAACI,MAAT,GAAkB,CAAxB,IACAJ,QAAQ,CAACA,QAAQ,CAACI,MAAT,GAAkB,CAAnB,CAAR,CAA8BC,MAA9B,CAAqCT,GAArC,KAA6CO,MAD7C,IAEAH,QAAQ,CAACA,QAAQ,CAACI,MAAT,GAAkB,CAAnB,CAAR,CAA8BC,MAA9B,CAAqCT,GAHvC;AAKD,CANM","sourcesContent":["export const getSender = (loggedUser, users) => {\n  //return console.log('id')\n  //1on1 chatName\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\n\nexport const getSenderFull = (loggedUser, users) => {\n  //eye icon ProfileModal\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n\n//separating user's and sender's text in chatbox\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\n//padding between same user's/sender's texts\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\n//displaying avatar on sender's last message\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\n\n"]},"metadata":{},"sourceType":"module"}