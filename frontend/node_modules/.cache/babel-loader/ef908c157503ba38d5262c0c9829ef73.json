{"ast":null,"code":"var _jsxFileName = \"/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\"; //import { useHelper } from '../config/helper-hook';\n\nimport { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport ChatContext from \"../Context/chat-context\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\"; //const ENDPOINT = \"http://localhost:5000\"; //development\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"https://textalot.herokuapp.com\"; //for deployment -production\n\nvar socket, selectedChatCompare;\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = useContext(ChatContext); //console.log(selectedChat, \"selectedChat in chatBox\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      console.log(data, \"fetched messsages of the selected chat data\");\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        }; //async func -- wont make newMessage empty instantaneously\n        //ui enhancement -- input to be empty as soon as we hit ender/send\n\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config); //setNewMessage(\"\");\n\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n        console.log(data, \"sent message response data\");\n      } catch (error) {\n        console.log(error.message);\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false)); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages(); //whwnever selctedChat changes, fetchAllMessages again for new selectedChat._id\n    //just to keep a track\n\n    selectedChatCompare = selectedChat; // eslint-disable-next-line\n  }, [selectedChat]); //console.log(notification, 'notification Bellicon');\n\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        // if chat is not selected or doesn't match current chat\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain); //updating our chats in our my chats on newMessageRecieved\n\n          console.log(notification, \"notification bell-icon check\");\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value); //typing animation code\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    } //debounce/throttle function\n\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), messages && !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions,\n              height: 40,\n              width: 50,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleChat, \"w/IyTFK1OaK97lCz3b9FlrA1/nw=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["/Users/shikharmishra/Documents/Mishra-Messenger/frontend/src/components/SingleChat.js"],"names":["FormControl","Input","Box","Text","IconButton","Spinner","useToast","getSender","getSenderFull","useContext","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","UpdateGroupChatModal","ChatContext","Lottie","animationData","io","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","selectedChat","setSelectedChat","user","notification","setNotification","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","fetchMessages","config","headers","Authorization","token","data","get","_id","console","log","emit","error","message","title","description","status","duration","isClosable","position","sendMessage","event","key","post","content","chatId","on","newMessageRecieved","chat","includes","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\n//import { useHelper } from '../config/helper-hook';\nimport { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport ChatContext from \"../Context/chat-context\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\n\n//const ENDPOINT = \"http://localhost:5000\"; //development\nconst ENDPOINT = \"https://textalot.herokuapp.com\"; //for deployment -production\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = useContext(ChatContext);\n  //console.log(selectedChat, \"selectedChat in chatBox\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}` },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n\n      setMessages(data);\n      setLoading(false);\n      console.log(data, \"fetched messsages of the selected chat data\");\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        //async func -- wont make newMessage empty instantaneously\n        //ui enhancement -- input to be empty as soon as we hit ender/send\n        setNewMessage(\"\");\n\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n\n        //setNewMessage(\"\");\n        socket.emit(\"new message\", data);\n\n        setMessages([...messages, data]);\n        console.log(data, \"sent message response data\");\n      } catch (error) {\n        console.log(error.message);\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    //whwnever selctedChat changes, fetchAllMessages again for new selectedChat._id\n\n    //just to keep a track\n    selectedChatCompare = selectedChat;\n\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  //console.log(notification, 'notification Bellicon');\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if ( !selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n\n        // if chat is not selected or doesn't match current chat\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain); //updating our chats in our my chats on newMessageRecieved\n          console.log(notification, \"notification bell-icon check\");\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    //typing animation code\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    //debounce/throttle function\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages && !selectedChat.isGroupChat ? (\n              <>\n                {getSender(user, selectedChat.users)}\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\n              </>\n            ) : (\n              <>\n                {selectedChat.chatName.toUpperCase()}\n                <UpdateGroupChatModal\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                />\n              </>\n            )}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    height={40}\n                    width={50}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n"]},"metadata":{},"sourceType":"module"}